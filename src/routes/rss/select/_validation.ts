// Generated by ts-to-zod
import { z } from 'zod';

export const enclosureSchema = z.object({
	url: z.string(),
	length: z.number().optional(),
	type: z.string().optional()
});

export const itemSchema = z.object({
	link: z.string().optional(),
	guid: z.string().optional(),
	title: z.string().optional(),
	pubDate: z.string().optional(),
	creator: z.string().optional(),
	summary: z.string().optional(),
	content: z.string().optional(),
	isoDate: z.string().optional(),
	categories: z.array(z.string()).optional(),
	contentSnippet: z.string().optional(),
	enclosure: enclosureSchema.optional()
});

export const paginationLinksSchema = z.object({
	self: z.string().optional(),
	first: z.string().optional(),
	next: z.string().optional(),
	last: z.string().optional(),
	prev: z.string().optional()
});

export const outputSchema = z.object({
	image: z
		.object({
			link: z.string().optional(),
			url: z.string(),
			title: z.string().optional()
		})
		.optional(),
	paginationLinks: paginationLinksSchema.optional(),
	link: z.string().optional(),
	title: z.string().optional(),
	items: z.array(itemSchema),
	feedUrl: z.string().optional(),
	description: z.string().optional(),
	itunes: z
		.record(z.any())
		.and(
			z.object({
				image: z.string().optional(),
				owner: z
					.object({
						name: z.string().optional(),
						email: z.string().optional()
					})
					.optional(),
				author: z.string().optional(),
				summary: z.string().optional(),
				explicit: z.string().optional(),
				categories: z.array(z.string()).optional(),
				keywords: z.array(z.string()).optional()
			})
		)
		.optional()
});
